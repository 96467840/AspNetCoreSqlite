установить https://system.data.sqlite.org/index.html/doc/trunk/www/downloads.wiki
поставил (Setups for 64-bit Windows (.NET Framework 4.6))
удалил. трабла в другом: Startup project 'src\AspNetCoreSqlite' targets framework '.NETStandard'. This framework is not intended for execution and may fail to resolve runtime dependencies. If so, select a different startup project and try again.

решение создать консольное приложение и тягать БД в него. как обычно через Жопу!

Install-Package Microsoft.EntityFrameworkCore.Sqlite
Install-Package Microsoft.EntityFrameworkCore.Tools
Install-Package Microsoft.EntityFrameworkCore.Sqlite.Design


вытащить БД
Scaffold-DbContext "Filename=..\AspNetCore\_db.sqlite" Microsoft.EntityFrameworkCore.Sqlite -OutputDir DBModels
Scaffold-DbContext "Filename=D:/sqlite/_db.sqlite" Microsoft.EntityFrameworkCore.Sqlite -OutputDir DBModels -Context StorageContext -Force -Verbose



документация 
https://docs.microsoft.com/en-us/aspnet/core/data/ef-mvc/intro
https://docs.microsoft.com/ru-ru/ef/core/index

статья на русском "Доступ к данным - EF7-миграции: не новые, но определенно улучшенные"
https://msdn.microsoft.com/ru-ru/magazine/mt614250.aspx

get-help Scaffold-DbContext
get-help Scaffold-DbContext -detailed

миграции (вызывать в консоли в папке src/AspNetCoreSqlite)
dotnet ef migrations add InitialCreate
dotnet ef database update

dotnet ef migrations add News
dotnet ef database update

алгоритм обновления БД (пока сложновато все - думаю как оптимизирвоать и автоматизировать)
0. комит (чтобы миграция шла обособлено и в случае чего тупо откат и заново)
1. накатываем изменения в БД (запросом, редактором) (которая у нас основная "_db.sqlite". БД сайтов обновим автоматически при запуске)
2. обновляем модели в коде
	a. сначала вытаскиваем с помощью Scaffold-DbContext
		Scaffold-DbContext "Filename=D:/sqlite/_db.sqlite" Microsoft.EntityFrameworkCore.Sqlite -OutputDir DBModels -Context StorageContext -Force -Verbose
	b. изменяем AspNetCoreComponentLibrary/Entities
	c. удаляем сущности из AspNetCoreSqlite/DBModels (оставляем тока StorageContext)
	d. приводим в порядок StorageContext (херим метод OnConfiguring и добавляем using AspNetCoreComponentLibrary;)
3. создаем миграцию
	dotnet ef migrations add [Migration Name]
4. самое глупое это приводим БД в состояние до пункта 1. (иначе на 5 шаге будет fail) 
	надо попробовать вариант с ручной записью в таблицу __EFMigrationsHistory
	НО таким образом мы не сможем проверить, а накатывается ли наша миграция или нет (есть ньюансы! один из них указать у поля ограничение unique и все накрывается. ef пытается создать индекс с автоматическим именем и ломается)
5. обновляем БД из миграции
	dotnet ef database update
6. в случае успеха комит

если пропускать 4 и 5 пункты, то будет пиздец когда будет несколько программистов - будет невозможно накатить чужие миграции так как будет происходит фэйл на своих же


-----------------
удаление миграции
1. если миграция уже в БД, то обновляем БД до последней хорошей миграции
dotnet ef database update InitialCreate
2. удаляем миграцию (имя миграции не надо указывать - удаляем поштучно)
dotnet ef migrations remove

----------------
sql в миграциях 
migrationBuilder.Sql("INSERT INTO dbo.Department (Name, Budget, StartDate) VALUES ('Temp', 0.00, GETDATE())");